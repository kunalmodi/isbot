{"version":3,"sources":["src/index.js","src/amend/index.js","src/isbot/index.js","../src/amend/index.js","../src/list.json","script.js"],"names":["amend","list","RegExp","test","error","forEach","_ref","search","replace","index","lastIndexOf","splice","flags","_list","WeakMap","_pattern","_update","WeakSet","_index","Isbot","constructor","patterns","_classPrivateMethodInitSpec","_classPrivateFieldInitSpec","writable","value","_classPrivateFieldSet","slice","_classPrivateMethodGet","_update2","call","Object","defineProperties","ua","entries","getOwnPropertyDescriptors","prototype","reduce","accumulator","prop","descriptor","assign","bind","get","_classPrivateFieldGet","Boolean","find","match","arguments","length","undefined","matches","filter","entry","clear","exclude","extend","filters","push","apply","rule","_index2","map","toLowerCase","spawn","join","indexOf","isbot","_ref2","_slicedToArray","module","exports","_","_interopRequireDefault","require","obj","__esModule","default","timer","textarea","document","querySelector","output","query","window","location","change","target","clearTimeout","setTimeout","check","append","parent","tag","string","ele","createElement","appendChild","createTextNode","details","_isbot$matches","fragment","createDocumentFragment","is","found","pattern","innerHTML","trim","firstChild","removeChild","className","childNodes","child","_child$parentNode","parentNode","decodeURIComponent","navigator","userAgent","addEventListener","select"],"mappings":"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","file":"script.d5f53ac3.js","sourceRoot":"../page","sourcesContent":["import { Isbot } from './isbot/index.js'\n\nconst isbot = new Isbot()\n\nexport default isbot\n","/**\n * Mutate given list of patter strings\n * @param {string[]} list\n * @returns {string[]}\n */\nexport function amend (list) {\n  try {\n    // Risk: Uses lookbehind assertion, avoid breakage in parsing by using RegExp constructor\n    new RegExp('(?<! cu)bot').test('dangerbot') // eslint-disable-line prefer-regex-literals\n  } catch (error) {\n    // Skip regex fixes\n    return list\n  }\n\n  [\n    // Addresses: Cubot device\n    ['bot', '(?<! cu)bot'],\n    // Addresses: Android webview\n    ['google', '(?<! (?:channel/|google/))google(?!(app|/google| pixel))'],\n    // Addresses: libhttp browser\n    ['http', '(?<!(?:lib))http'],\n    // Addresses: java based browsers\n    ['java', 'java(?!;)'],\n    // Addresses: Yandex Search App\n    ['search', '(?<! ya(?:yandex)?)search']\n  ].forEach(\n    ([search, replace]) => {\n      const index = list.lastIndexOf(search)\n      if (~index) {\n        list.splice(index, 1, replace)\n      }\n    }\n  )\n\n  return list\n}\n","import list from '../list.json' assert { type: 'json' }\nimport { amend } from '../amend/index.js'\n\namend(list)\n\nconst flags = 'i'\n\n/**\n * Test user agents for matching patterns\n */\nexport class Isbot {\n  /**\n   * @type {string[]}\n   */\n  #list\n\n  /**\n   * @type {RegExp}\n   */\n  #pattern\n\n  constructor (patterns) {\n    this.#list = patterns || list.slice()\n    this.#update()\n\n    const isbot = ua => this.test(ua)\n\n    return Object.defineProperties(\n      isbot,\n      Object.entries(Object.getOwnPropertyDescriptors(Isbot.prototype)).reduce(\n        (accumulator, [prop, descriptor]) => {\n          if (typeof descriptor.value === 'function') {\n            Object.assign(\n              accumulator,\n              { [prop]: { value: this[prop].bind(this) } }\n            )\n          }\n          if (typeof descriptor.get === 'function') {\n            Object.assign(\n              accumulator,\n              { [prop]: { get: () => this[prop] } }\n            )\n          }\n          return accumulator\n        },\n        {}\n      )\n    )\n  }\n\n  /**\n   * Recreate the pattern from rules list\n   */\n  #update () {\n    this.#pattern = new RegExp(\n      this.#list.join('|'),\n      flags\n    )\n  }\n\n  /**\n   * Find the first index of an existing rule or -1 if not found\n   * @param  {string} rule\n   * @returns {number}\n   */\n  #index (rule) {\n    return this.#list.indexOf(rule.toLowerCase())\n  }\n\n  /**\n   * Get a clone of the pattern\n   * @type RegExp\n   */\n  get pattern () {\n    return new RegExp(this.#pattern)\n  }\n\n  /**\n   * Match given string against out pattern\n   * @param  {string} ua User Agent string\n   * @returns {boolean}\n   */\n  test (ua) {\n    return Boolean(ua) && this.#pattern.test(ua)\n  }\n\n  /**\n   * Get the match for strings' known crawler pattern\n   * @param  {string} ua User Agent string\n   * @returns {string|null}\n   */\n  find (ua = '') {\n    const match = ua.match(this.#pattern)\n    return match && match[0]\n  }\n\n  /**\n   * Get the patterns that match user agent string if any\n   * @param  {string} ua User Agent string\n   * @returns {string[]}\n   */\n  matches (ua = '') {\n    return this.#list.filter(\n      entry => new RegExp(entry, flags).test(ua)\n    )\n  }\n\n  /**\n   * Clear all patterns that match user agent\n   * @param  {string} ua User Agent string\n   * @returns {void}\n   */\n  clear (ua = '') {\n    this.exclude(this.matches(ua))\n  }\n\n  /**\n   * Extent patterns for known crawlers\n   * @param  {string[]} filters\n   * @returns {void}\n   */\n  extend (filters = []) {\n    [].push.apply(\n      this.#list,\n      filters.filter(\n        rule => this.#index(rule) === -1\n      ).map(\n        filter => filter.toLowerCase()\n      )\n    )\n    this.#update()\n  }\n\n  /**\n   * Exclude patterns from bot pattern rule\n   * @param  {string[]} filters\n   * @returns {void}\n   */\n  exclude (filters = []) {\n    let { length } = filters\n    while (length--) {\n      const index = this.#index(filters[length])\n      if (index > -1) {\n        this.#list.splice(index, 1)\n      }\n    }\n    this.#update()\n  }\n\n  /**\n   * Create a new Isbot instance using given list or self's list\n   * @param  {string[]} [list]\n   * @returns {Isbot}\n   */\n  spawn (list) {\n    return new Isbot(list || this.#list)\n  }\n}\n","/**\n * Mutate given list of patter strings\n * @param {string[]} list\n * @returns {string[]}\n */\nexport function amend (list) {\n  try {\n    // Risk: Uses lookbehind assertion, avoid breakage in parsing by using RegExp constructor\n    new RegExp('(?<! cu)bot').test('dangerbot') // eslint-disable-line prefer-regex-literals\n  } catch (error) {\n    // Skip regex fixes\n    return list\n  }\n\n  [\n    // Addresses: Cubot device\n    ['bot', '(?<! cu)bot'],\n    // Addresses: Android webview\n    ['google', '(?<! (?:channel/|google/))google(?!(app|/google| pixel))'],\n    // Addresses: libhttp browser\n    ['http', '(?<!(?:lib))http'],\n    // Addresses: java based browsers\n    ['java', 'java(?!;)'],\n    // Addresses: Yandex Search App\n    ['search', '(?<! ya(?:yandex)?)search']\n  ].forEach(\n    ([search, replace]) => {\n      const index = list.lastIndexOf(search)\n      if (~index) {\n        list.splice(index, 1, replace)\n      }\n    }\n  )\n\n  return list\n}\n","module.exports=[\" daum[ /]\",\" deusu/\",\" yadirectfetcher\",\"(?:^| )site\",\"(?:^|[^g])news\",\"@[a-z]\",\"\\\\(at\\\\)[a-z]\",\"\\\\(github\\\\.com/\",\"\\\\[at\\\\][a-z]\",\"^12345\",\"^<\",\"^[\\\\w \\\\.\\\\-\\\\(\\\\)]+(/v?\\\\d+(\\\\.\\\\d+)?(\\\\.\\\\d{1,10})?)?$\",\"^[^ ]{50,}$\",\"^active\",\"^ad muncher\",\"^amaya\",\"^anglesharp/\",\"^anonymous\",\"^avsdevicesdk/\",\"^axios/\",\"^bidtellect/\",\"^biglotron\",\"^btwebclient/\",\"^castro\",\"^clamav[ /]\",\"^client/\",\"^cobweb/\",\"^coccoc\",\"^custom\",\"^ddg[_-]android\",\"^discourse\",\"^dispatch/\\\\d\",\"^downcast/\",\"^duckduckgo\",\"^facebook\",\"^fdm[ /]\\\\d\",\"^getright/\",\"^gozilla/\",\"^hatena\",\"^hobbit\",\"^hotzonu\",\"^hwcdn/\",\"^jeode/\",\"^jetty/\",\"^jigsaw\",\"^linkdex\",\"^lwp[-: ]\",\"^metauri\",\"^microsoft bits\",\"^movabletype\",\"^mozilla/\\\\d\\\\.\\\\d \\\\(compatible;?\\\\)$\",\"^mozilla/\\\\d\\\\.\\\\d \\\\w*$\",\"^navermailapp\",\"^netsurf\",\"^offline explorer\",\"^php\",\"^postman\",\"^postrank\",\"^python\",\"^read\",\"^reed\",\"^restsharp/\",\"^snapchat\",\"^space bison\",\"^svn\",\"^swcd \",\"^taringa\",\"^test certificate info\",\"^thumbor/\",\"^tumblr/\",\"^user-agent:mozilla\",\"^valid\",\"^venus/fedoraplanet\",\"^w3c\",\"^webbandit/\",\"^webcopier\",\"^wget\",\"^whatsapp\",\"^xenu link sleuth\",\"^yahoo\",\"^yandex\",\"^zdm/\\\\d\",\"^zoom marketplace/\",\"^{{.*}}$\",\"adbeat\\\\.com\",\"appinsights\",\"archive\",\"ask jeeves/teoma\",\"bit\\\\.ly/\",\"bluecoat drtr\",\"bot\",\"browsex\",\"burpcollaborator\",\"capture\",\"catch\",\"check\",\"chrome-lighthouse\",\"chromeframe\",\"cloud\",\"crawl\",\"cryptoapi\",\"dareboost\",\"datanyze\",\"dataprovider\",\"dejaclick\",\"dmbrowser\",\"download\",\"evc-batch/\",\"feed\",\"firephp\",\"freesafeip\",\"ghost\",\"gomezagent\",\"google\",\"headlesschrome/\",\"http\",\"httrack\",\"hubspot marketing grader\",\"hydra\",\"ibisbrowser\",\"images\",\"iplabel\",\"ips-agent\",\"java\",\"library\",\"mail\\\\.ru/\",\"manager\",\"monitor\",\"morningscore/\",\"neustar wpm\",\"nutch\",\"offbyone\",\"optimize\",\"pageburst\",\"pagespeed\",\"perl\",\"phantom\",\"pingdom\",\"powermarks\",\"preview\",\"proxy\",\"ptst[ /]\\\\d\",\"reader\",\"rexx;\",\"rigor\",\"rss\",\"scan\",\"scrape\",\"search\",\"serp ?reputation ?management\",\"server\",\"sogou\",\"sparkler/\",\"speedcurve\",\"spider\",\"splash\",\"statuscake\",\"stumbleupon\\\\.com\",\"supercleaner\",\"synapse\",\"synthetic\",\"taginspector/\",\"torrent\",\"tracemyfile\",\"transcoder\",\"trendsmapresolver\",\"twingly recon\",\"url\",\"virtuoso\",\"wappalyzer\",\"webglance\",\"webkit2png\",\"websitemetadataretriever\",\"whatcms/\",\"wordpress\",\"zgrab\"];","import isbot from '..'\nimport { amend } from '../src/amend/index.js'\nimport list from '../src/list.json'\n\n{\n  const textarea = document.querySelector('textarea')\n  const output = document.querySelector('output')\n  let timer\n\n  const query = window.location.search.replace(/\\?ua=(.*)$/, '$1')\n\n  amend(list)\n\n  textarea.childNodes.forEach(child => child.parentNode?.removeChild(child))\n  textarea.appendChild(document.createTextNode(\n    query\n      ? decodeURIComponent(query)\n      : navigator.userAgent\n  )\n  )\n  textarea.addEventListener('keyup', change)\n  textarea.addEventListener('paste', change)\n  textarea.addEventListener('focus', () => textarea.select())\n  check()\n\n  function change ({ target: { value } }) {\n    clearTimeout(timer)\n    timer = setTimeout(check, 200, value)\n  }\n\n  function append (parent, tag, string) {\n    if (tag) {\n      const ele = document.createElement('kbd')\n      ele.appendChild(document.createTextNode(string))\n      parent.appendChild(ele)\n    } else {\n      parent.appendChild(document.createTextNode(string))\n    }\n  }\n\n  function details (ua) {\n    const fragment = document.createDocumentFragment()\n    const is = isbot(ua)\n    const found = is && isbot.find(ua)\n    const pattern = found\n      ? isbot.matches(ua)?.find(pattern => new RegExp(pattern, 'i').test(found))\n      : null\n\n    is\n      ? append(fragment, null, 'I think so, yes\\n')\n      : append(fragment, null, 'I don\\'t think so, no\\nI could not find a pattern I recognise')\n    found && append(fragment, null, 'The substring ')\n    found && append(fragment, 'kbd', found)\n    pattern && append(fragment, null, ' matches the pattern ')\n    pattern && append(fragment, 'kbd', pattern)\n    return fragment\n  }\n\n  function check (value = textarea.innerHTML) {\n    value = value.trim()\n    while (output.firstChild) {\n      output.removeChild(output.firstChild)\n    }\n    if (value === '') {\n      output.appendChild(\n        document.createTextNode(\n          'Insert user agent string in the text box'\n        )\n      )\n      return\n    }\n\n    output.appendChild(details(value))\n\n    output.className = ''\n    setTimeout(() => { output.className = 'highlight' }, 100)\n  }\n}\n"]}