{"version":3,"sources":["src/index.js","src/amend/index.js","src/isbot/index.js","script.js"],"names":["amend","list","RegExp","test","error","forEach","_ref","_ref2","_slicedToArray","search","replace","index","lastIndexOf","splice","flags","_list","WeakMap","_pattern","_update","WeakSet","_index","Isbot","patterns","_this","_classCallCheck","_classPrivateMethodInitSpec","_classPrivateFieldInitSpec","writable","value","_classPrivateFieldSet","slice","_classPrivateMethodGet","_update2","call","Object","defineProperties","ua","entries","getOwnPropertyDescriptors","prototype","reduce","accumulator","prop","descriptor","assign","_defineProperty","bind","get","_createClass","key","_classPrivateFieldGet","Boolean","match","arguments","length","undefined","filter","entry","exclude","matches","_this2","filters","push","apply","rule","_index2","map","toLowerCase","join","indexOf","isbot","_","_interopRequireDefault","require","obj","__esModule","default","timer","textarea","document","querySelector","output","copyLink","url","URL","window","location","href","searchParams","change","target","clearTimeout","setTimeout","check","append","parent","tag","string","ele","createElement","appendChild","createTextNode","details","_isbot$matches","fragment","createDocumentFragment","is","found","find","pattern","innerHTML","trim","firstChild","removeChild","childNodes","child","_child$parentNode","parentNode","navigator","userAgent","addEventListener","select","event","preventDefault","_document$location","protocol","host","pathname","clipboard","writeText","encodeURIComponent","dialog","body","showModal","close","style","opacity"],"mappings":"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","file":"script.c2611a02.js","sourceRoot":"../page","sourcesContent":["import { Isbot } from './isbot/index.js'\n\nconst isbot = new Isbot()\n\nexport default isbot\n","/**\n * Mutate given list of patter strings\n * @param {string[]} list\n * @returns {string[]}\n */\nexport function amend (list) {\n  try {\n    // Risk: Uses lookbehind assertion, avoid breakage in parsing by using RegExp constructor\n    new RegExp('(?<! cu)bot').test('dangerbot') // eslint-disable-line prefer-regex-literals\n  } catch (error) {\n    // Skip regex fixes\n    return list\n  }\n\n  [\n    // Addresses: Cubot device\n    ['bot', '(?<! cu)bot'],\n    // Addresses: Android webview\n    ['google', '(?<! (?:channel/|google/))google(?!(app|/google| pixel))'],\n    // Addresses: libhttp browser\n    ['http', '(?<!(?:lib))http'],\n    // Addresses: java based browsers\n    ['java', 'java(?!;)'],\n    // Addresses: Yandex Search App\n    ['search', '(?<! ya(?:yandex)?)search']\n  ].forEach(\n    ([search, replace]) => {\n      const index = list.lastIndexOf(search)\n      if (~index) {\n        list.splice(index, 1, replace)\n      }\n    }\n  )\n\n  return list\n}\n","import list from '../list.json' assert { type: 'json' }\nimport { amend } from '../amend/index.js'\n\namend(list)\n\nconst flags = 'i'\n\n/**\n * Test user agents for matching patterns\n */\nexport class Isbot {\n  /**\n   * @type {string[]}\n   */\n  #list\n\n  /**\n   * @type {RegExp}\n   */\n  #pattern\n\n  constructor (patterns) {\n    this.#list = patterns || list.slice()\n    this.#update()\n\n    const isbot = ua => this.test(ua)\n\n    return Object.defineProperties(\n      isbot,\n      Object.entries(Object.getOwnPropertyDescriptors(Isbot.prototype)).reduce(\n        (accumulator, [prop, descriptor]) => {\n          if (typeof descriptor.value === 'function') {\n            Object.assign(\n              accumulator,\n              { [prop]: { value: this[prop].bind(this) } }\n            )\n          }\n          if (typeof descriptor.get === 'function') {\n            Object.assign(\n              accumulator,\n              { [prop]: { get: () => this[prop] } }\n            )\n          }\n          return accumulator\n        },\n        {}\n      )\n    )\n  }\n\n  /**\n   * Recreate the pattern from rules list\n   */\n  #update () {\n    this.#pattern = new RegExp(\n      this.#list.join('|'),\n      flags\n    )\n  }\n\n  /**\n   * Find the first index of an existing rule or -1 if not found\n   * @param  {string} rule\n   * @returns {number}\n   */\n  #index (rule) {\n    return this.#list.indexOf(rule.toLowerCase())\n  }\n\n  /**\n   * Get a clone of the pattern\n   * @type RegExp\n   */\n  get pattern () {\n    return new RegExp(this.#pattern)\n  }\n\n  /**\n   * Match given string against out pattern\n   * @param  {string} ua User Agent string\n   * @returns {boolean}\n   */\n  test (ua) {\n    return Boolean(ua) && this.#pattern.test(ua)\n  }\n\n  /**\n   * Get the match for strings' known crawler pattern\n   * @param  {string} ua User Agent string\n   * @returns {string|null}\n   */\n  find (ua = '') {\n    const match = ua.match(this.#pattern)\n    return match && match[0]\n  }\n\n  /**\n   * Get the patterns that match user agent string if any\n   * @param  {string} ua User Agent string\n   * @returns {string[]}\n   */\n  matches (ua = '') {\n    return this.#list.filter(\n      entry => new RegExp(entry, flags).test(ua)\n    )\n  }\n\n  /**\n   * Clear all patterns that match user agent\n   * @param  {string} ua User Agent string\n   * @returns {void}\n   */\n  clear (ua = '') {\n    this.exclude(this.matches(ua))\n  }\n\n  /**\n   * Extent patterns for known crawlers\n   * @param  {string[]} filters\n   * @returns {void}\n   */\n  extend (filters = []) {\n    [].push.apply(\n      this.#list,\n      filters.filter(\n        rule => this.#index(rule) === -1\n      ).map(\n        filter => filter.toLowerCase()\n      )\n    )\n    this.#update()\n  }\n\n  /**\n   * Exclude patterns from bot pattern rule\n   * @param  {string[]} filters\n   * @returns {void}\n   */\n  exclude (filters = []) {\n    let { length } = filters\n    while (length--) {\n      const index = this.#index(filters[length])\n      if (index > -1) {\n        this.#list.splice(index, 1)\n      }\n    }\n    this.#update()\n  }\n\n  /**\n   * Create a new Isbot instance using given list or self's list\n   * @param  {string[]} [list]\n   * @returns {Isbot}\n   */\n  spawn (list) {\n    return new Isbot(list || this.#list)\n  }\n}\n","import isbot from '..'\n\n{\n  const textarea = document.querySelector('textarea')\n  const output = document.querySelector('output')\n  const copyLink = document.querySelector('[id=\"copy-link\"]')\n  let timer\n\n  const url = new URL(window.location.href)\n  const ua = url.searchParams.get('ua')\n\n  textarea.childNodes.forEach(child => child.parentNode?.removeChild(child))\n  textarea.appendChild(document.createTextNode(ua || navigator.userAgent))\n  textarea.addEventListener('keyup', change)\n  textarea.addEventListener('paste', change)\n  textarea.addEventListener('focus', () => textarea.select())\n  check()\n\n  function change ({ target: { value } }) {\n    clearTimeout(timer)\n    timer = setTimeout(check, 200, value)\n  }\n\n  function append (parent, tag, string) {\n    if (tag) {\n      const ele = document.createElement('kbd')\n      ele.appendChild(document.createTextNode(string))\n      parent.appendChild(ele)\n    } else {\n      parent.appendChild(document.createTextNode(string))\n    }\n  }\n\n  function details (ua) {\n    const fragment = document.createDocumentFragment()\n    const is = isbot(ua)\n    const found = is && isbot.find(ua)\n    const pattern = found\n      ? isbot.matches(ua)?.find(pattern => new RegExp(pattern, 'i').test(found))\n      : null\n\n    is\n      ? append(fragment, null, 'I think so, yes\\n')\n      : append(fragment, null, 'I don\\'t think so, no\\nI could not find a pattern I recognise')\n    found && append(fragment, null, 'The substring ')\n    found && append(fragment, 'kbd', found)\n    pattern && append(fragment, null, ' matches the pattern ')\n    pattern && append(fragment, 'kbd', pattern)\n    return fragment\n  }\n\n  function check (value = textarea.innerHTML) {\n    value = value.trim()\n    while (output.firstChild) {\n      output.removeChild(output.firstChild)\n    }\n    if (value === '') {\n      output.appendChild(\n        document.createTextNode(\n          'Insert user agent string in the text box'\n        )\n      )\n      return\n    }\n\n    output.appendChild(details(value))\n  }\n\n  copyLink.addEventListener('click', (event) => {\n    event.preventDefault()\n    const { protocol, host, pathname } = document.location\n    navigator.clipboard.writeText([\n      protocol, '//', host, pathname, '?ua=', encodeURIComponent(textarea.value)\n    ].join(''))\n    const dialog = document.createElement('dialog')\n    dialog.appendChild(document.createTextNode('copied to clipboard'))\n    document.body.appendChild(dialog)\n    dialog.showModal()\n    setTimeout(() => {\n      dialog.addEventListener('transitionend', () => {\n        dialog.close()\n        document.body.removeChild(dialog)\n      })\n      dialog.style.opacity = 0\n    }, 1000)\n  })\n}\n"]}